#+TITLE: ob-clojurescript
#+AUTHOR: Larry Staton Jr.
#+EMAIL: larry@larrystaton.com
#+DATE: 2018 March 10
#+LANGUAGE: en
#+OPTIONS: num: nil

* Contents                                                   :noexport:toc_2:
- [[#about][About]]
  - [[#screen-capture][Screen Capture]]
- [[#requirements][Requirements]]
- [[#installation][Installation]]
- [[#testing][Testing]]
  - [[#running-tests][Running Tests]]
- [[#library-code][Library Code]]
- [[#usage][Usage]]
- [[#project-files][Project Files]]
  - [[#gitignore][gitignore]]
  - [[#gitlab-ci][GitLab CI]]

* About

	#+HTML: <img src="https://img.shields.io/badge/license-GPL_3-green.svg" alt="GPL 3 License" />

	An Emacs library for [[http://orgmode.org][Org mode]] that evaluates [[https://github.com/clojure/clojurescript][ClojureScript]] code blocks
	with [[https://github.com/anmonteiro/lumo][Lumo]].

** Screen Capture

	 Here's a screen capture showing ~ob-clojurescript~ in action.

#+html: <video src="media/ob-clojurescript.mp4" controls></video>

* Requirements

	- Org version 9.0 or higher
	- Lumo

* Installation

	MELPA Instructions

* Testing

	This library uses ~ert~ and an Org mode file named
	[[file:ob-clojurescript-test.org][ob-clojurescript-test.org]] for testing purposes.

	Each test below should have a corresponding source block in the Org
	file.

#+BEGIN_SRC emacs-lisp :tangle ob-clojurescript-test.el
;;; ob-clojurescript-test.el
;;
;; This file is not part of GNU Emacs.
;;
;;; Code:
(require 'ert)
(require 'org-id)

(defconst ob-clojurescript-test-dir
  (expand-file-name (file-name-directory (or load-file-name buffer-file-name))))

(defconst org-id-locations-file
  (expand-file-name ".test-org-id-locations" ob-clojurescript-test-dir))

(defun ob-clojurescript-test-update-id-locations ()
  (let ((files (directory-files
                ob-clojurescript-test-dir 'full
                "^\\([^.]\\|\\.\\([^.]\\|\\..\\)\\).*\\.org$")))
    (org-id-update-id-locations files)))

(defmacro org-test-at-id (id &rest body)
  "Run body after placing the point in the headline identified by ID."
  (declare (indent 1))
  `(let* ((id-location (org-id-find ,id))
	  (id-file (car id-location))
	  (visited-p (get-file-buffer id-file))
	  to-be-removed)
     (unwind-protect
				 (save-window-excursion
					 (save-match-data
						 (org-id-goto ,id)
						 (setq to-be-removed (current-buffer))
						 (condition-case nil
								 (progn
									 (org-show-subtree)
									 (org-show-block-all))
							 (error nil))
						 (save-restriction ,@body)))
       (unless (or visited-p (not to-be-removed))
				 (kill-buffer to-be-removed)))))
(def-edebug-spec org-test-at-id (form body))

(unless (featurep 'ob-clojurescript)
  (signal 'missing-test-dependency "Support for ClojureScript code blocks"))

(ert-deftest ob-clojurescript/assert ()
  (should t))

(ert-deftest ob-clojurescript/simple ()
  "Simple output"
  (if (executable-find org-babel-clojurescript-command)
      (org-test-at-id "FABFDF69-1B5A-4193-8FA7-DA57125E3352"
		      (org-babel-next-src-block 1)
		      (should (equal '(1 4 9) (org-babel-execute-src-block))))))

(ert-deftest ob-clojurescript/native-js ()
	"JavaScript interop"
	(if (executable-find org-babel-clojurescript-command)
      (org-test-at-id "FABFDF69-1B5A-4193-8FA7-DA57125E3352"
		      (org-babel-next-src-block 2)
		      (should (string-equal "hello" (org-babel-execute-src-block))))))

(ert-deftest ob-clojurescript/functions ()
	"Functions"
	(if (executable-find org-babel-clojurescript-command)
      (org-test-at-id "FABFDF69-1B5A-4193-8FA7-DA57125E3352"
		      (org-babel-next-src-block 3)
		      (should (string-equal "#'cljs.user/greet\nHello, Rich" (org-babel-execute-src-block))))))

(defun ob-clojurescript-test-runall ()
  (progn
    (ob-clojurescript-test-update-id-locations)
    (ert t)))

(provide 'ob-clojurescript-test)
#+END_SRC

** Running Tests

	 You can run the tests using Make. To run the tests execute:

#+BEGIN_SRC sh
make test
#+END_SRC

   Here's the Makefile:

#+NAME: Makefile
#+BEGIN_SRC sh :tangle Makefile
.PHONY: test

test:
	@rm -f .test-org-id-locations
	emacs -Q --batch -q \
		-L . \
		-l ob-clojurescript.el \
		-l ob-clojurescript-test.el \
		--eval "(progn \
	              (setq org-confirm-babel-evaluate nil) \
	              (org-babel-do-load-languages \
	                'org-babel-load-languages '((emacs-lisp . t) \
	                                            (sh . t) \
	                                            (org . t) \
	                                            (clojurescript . t))))" \
	    -f ob-clojurescript-test-runall
#+END_SRC

* Library Code


#+BEGIN_SRC emacs-lisp :tangle ob-clojurescript.el
;;; ob-clojurescript.el --- org-babel functions for ClojureScript evaluation -*- lexical-binding: t; -*-

;; Author: Larry Staton Jr.
;; Maintainer: Larry Staton Jr.
;; Created: 10 March 2018
;; Keywords: literate programming, reproducible research
;; Homepage: https://gitlab.com/statonjr/ob-clojurescript
;; Package-Requires: ((emacs "24.4") (org "9.0"))

;; This file is not part of GNU Emacs.

;;; Commentary:

;; Org-babel support for evaluating ClojureScript code.

;; Requirements:

;; - [[https://github.com/anmonteiro/lumo][lumo]]
;; - clojurescript-mode

;;; License:

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 3
;; of the License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.

;;; Code:
(require 'ob)

(defvar org-babel-tangle-lang-exts)
(add-to-list 'org-babel-tangle-lang-exts '("clojurescript" . "cljs"))

(defvar org-babel-clojurescript-command "lumo"
  "The command to use to compile and run your ClojureScript code.")

(defvar org-babel-default-header-args:clojurescript '())
(defvar org-babel-header-args:clojurescript '((package . :any)))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ob-clojurescript.el :results silent
(defun ob-clojurescript-escape-quotes (str-val)
	"Escape quotes for STR-VAL so that Lumo can understand."
	(replace-regexp-in-string "\"" "\\\"" str-val 'FIXEDCASE 'LITERAL))

(defun org-babel-expand-body:clojurescript (body params)
	"Expand BODY according to PARAMS, return the expanded body."
	(let* ((vars (org-babel--get-vars params))
				 (result-params (cdr (assq :result-params params)))
				 (print-level nil) (print-length nil)
				 (body (ob-clojurescript-escape-quotes
								(org-trim
								 (if (null vars)
										 (org-trim body)
									 (concat "(let ["
													 (mapconcat
														(lambda (var)
															(format "%S (quote %S)" (car var) (cdr var)))
														vars "\n      ")
													 "]\n" body ")"))))))
		(if (or (member "code" result-params)
						(member "pp" result-params))
				(format "(print (do %s))" body)
			body)))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ob-clojurescript.el :results silent
(defun org-babel-execute:clojurescript (body params)
  "Execute a block of ClojureScript code in BODY with Babel using PARAMS."
  (let ((expanded (org-babel-expand-body:clojurescript body params))
				result)
		(setq result
					(org-babel-trim
					 (shell-command-to-string
						(concat "/usr/local/bin/lumo -e \"" expanded "\""))))
    (org-babel-result-cond (cdr (assoc :result-params params))
			result
      (condition-case nil (org-babel-script-escape result)
				(error result)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ob-clojurescript.el
(provide 'ob-clojurescript)
;;; ob-clojurescript.el ends here
#+END_SRC

* Usage

	Create a =SRC= block and evaluate it with =C-c C-c=.

#+BEGIN_SRC clojurescript :results value code
(map (fn [x] (* x x)) [2 4 6])
#+END_SRC

#+RESULTS:
#+BEGIN_SRC clojurescript
(4 16 36)
#+END_SRC

* Project Files

** gitignore

#+BEGIN_SRC shell :tangle .gitignore
.DS_Store
/.test-org-id-locations
dist/
#+END_SRC

** GitLab CI

	 Tests for this project run at GitLab.

#+BEGIN_SRC yaml :tangle .gitlab-ci.yaml
image: debian:stretch

before_script:
  - apt update -qq

stages:
  - test

test:
  stage: test
  script:
    - make test
#+END_SRC

* TODO Next Steps [2/9]                                            :noexport:

 - [ ] Better commentary in code
 - [ ] More explanation of what's going on
 - [ ] Make backend configurable with planck
 - [ ] Make backend configurable with clj?
 - [ ] Make path to backend configurable
 - [X] Add screenshot/movie
 - [ ] More tests
 - [X] Run tests on GitLab CI
 - [ ] Add MELPA badges
