#+TITLE: ob-cljs
#+AUTHOR: Larry Staton Jr.
#+EMAIL: larry@larrystaton.com
#+DATE: 2018 March 10
#+LANGUAGE: en
#+OPTIONS: num: nil

* Contents                                                   :noexport:toc_2:
- [[#about][About]]
- [[#installation][Installation]]
- [[#testing][Testing]]
  - [[#running-tests][Running Tests]]
- [[#library-code][Library Code]]
- [[#usage][Usage]]
- [[#project-files][Project Files]]
  - [[#gitignore][gitignore]]

* About

	An Emacs library for [[http://orgmode.org][Org mode]] that evaluates [[https://github.com/clojure/clojurescript][ClojureScript]] code blocks
	with [[https://github.com/anmonteiro/lumo][lumo]].

* Installation

	I'll figure out how to get this on MELPA, but for now, you can
	either tangle this README then install the resulting =ob-cljs.el=
	file or you can evaluate the code in this README file.

* Testing

	This library uses ~ert~ and an Org mode file named
	[[file:test-ob-cljs.el][test-ob-cljs.el]] for testing purposes.

	Each test below should have a corresponding source block in the Org
	file.

#+BEGIN_SRC emacs-lisp :tangle test-ob-cljs.el
;;; test-ob-cljs.el
;;
;; This file is not part of GNU Emacs.
;;
;;; Code:
(require 'ert)
(require 'org-id)

(defconst ob-cljs-test-dir
  (expand-file-name (file-name-directory (or load-file-name buffer-file-name))))

(defconst org-id-locations-file
  (expand-file-name ".test-org-id-locations" ob-cljs-test-dir))

(defun ob-cljs-test-update-id-locations ()
  (let ((files (directory-files
                ob-cljs-test-dir 'full
                "^\\([^.]\\|\\.\\([^.]\\|\\..\\)\\).*\\.org$")))
    (org-id-update-id-locations files)))

(defmacro org-test-at-id (id &rest body)
  "Run body after placing the point in the headline identified by ID."
  (declare (indent 1))
  `(let* ((id-location (org-id-find ,id))
	  (id-file (car id-location))
	  (visited-p (get-file-buffer id-file))
	  to-be-removed)
     (unwind-protect
				 (save-window-excursion
					 (save-match-data
						 (org-id-goto ,id)
						 (setq to-be-removed (current-buffer))
						 (condition-case nil
								 (progn
									 (org-show-subtree)
									 (org-show-block-all))
							 (error nil))
						 (save-restriction ,@body)))
       (unless (or visited-p (not to-be-removed))
				 (kill-buffer to-be-removed)))))
(def-edebug-spec org-test-at-id (form body))

(unless (featurep 'ob-cljs)
  (signal 'missing-test-dependency "Support for ClojureScript code blocks"))

(ert-deftest ob-cljs/assert ()
  (should t))

(ert-deftest ob-cljs/simple ()
  "Simple output"
  (if (executable-find org-babel-cljs-command)
      (org-test-at-id "FABFDF69-1B5A-4193-8FA7-DA57125E3352"
		      (org-babel-next-src-block 1)
		      (should (equal '(1 4 9) (org-babel-execute-src-block))))))

(ert-deftest ob-cljs/native-js ()
	"JavaScript interop"
	(if (executable-find org-babel-cljs-command)
      (org-test-at-id "FABFDF69-1B5A-4193-8FA7-DA57125E3352"
		      (org-babel-next-src-block 2)
		      (should (string-equal "hello" (org-babel-execute-src-block))))))

(defun ob-cljs-test-runall ()
  (progn
    (ob-cljs-test-update-id-locations)
    (ert t)))

(provide 'ob-cljs-test)
#+END_SRC

** Running Tests

	 You can run the tests using Make. To run the tests execute:

#+BEGIN_SRC sh
make test
#+END_SRC

   Here's the Makefile:

#+BEGIN_SRC sh :tangle Makefile
.PHONY: test

test:
	@rm -f .test-org-id-locations
	emacs -Q --batch -q \
		-L . \
		-l ob-cljs.el \
		-l test-ob-cljs.el \
		--eval "(progn \
	              (setq org-confirm-babel-evaluate nil) \
	              (org-babel-do-load-languages \
	                'org-babel-load-languages '((emacs-lisp . t) \
	                                            (sh . t) \
	                                            (org . t) \
	                                            (cljs . t))))" \
	    -f ob-cljs-test-runall
#+END_SRC

* Library Code

#+BEGIN_SRC emacs-lisp :tangle ob-cljs.el
;;; ob-cljs.el --- org-babel functions for ClojureScript evaluation

;; Author: Larry Staton Jr.
;; Maintainer: Larry Staton Jr.
;; Created: 10 March 2018
;; Keywords: literate programming, reproducible research
;; Homepage: https://gitlab.com/statonjr/ob-cljs
;; Version: 0.0.1

;;; Commentary:

;; Org-babel support for evaluating ClojureScript code

;; Requirements:

;; - [[https://github.com/anmonteiro/lumo][lumo]]

;;; Code:
(require 'ob)
(eval-when-compile
  (require 'cl))

(defvar org-babel-tangle-lang-exts)
(add-to-list 'org-babel-tangle-lang-exts '("cljs" . "cljs"))

(defvar org-babel-cljs-command "lumo"
  "The command to use to compile and run your ClojureScript code.")

(defvar org-babel-default-header-args:cljs '())
(defvar org-babel-header-args:cljs '((package . :any)))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ob-cljs.el :results silent
(defun escape-quotes (str-val)
	(replace-regexp-in-string "\"" "\\\"" str-val 'FIXEDCASE 'LITERAL))

(defun org-babel-expand-body:cljs (body params)
	"Expand BODY according to PARAMS, return the expanded body."
	(message "raw body: %s" body)
  (let* ((vars (mapcar #'cdr (org-babel-get-header params :var)))
				 (result-params (cdr (assoc :result-params params)))
				 (print-level nil)
				 (print-length nil)
				 (body (escape-quotes
								(org-babel-trim
								 (if (> (length vars) 0)
										 (concat "(let ["
														 (mapconcat
															(lambda (var)
																(format "%S (quote %S)" (car var) (cdr var)))
															vars "\n      ")
														 "]\n" body ")")
									 body)))))
		(message "escaped body: %s" body)
    (if (or (member "code" result-params)
						(member "pp" result-params))
				(format "(print (do %s))" body)
      body)))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ob-cljs.el :results silent
(defun org-babel-execute:cljs (body params)
  "Execute a block of ClojureScript code with Babel."
  (let ((expanded (org-babel-expand-body:cljs body params))
				result)
		(message "expanded: %s" expanded)
		(setq result
					(org-babel-trim
					 (shell-command-to-string
						(concat "/usr/local/bin/lumo -e \"" expanded "\""))))
    (org-babel-result-cond (cdr (assoc :result-params params))
			result
      (condition-case nil (org-babel-script-escape result)
	(error result)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ob-cljs.el
(provide 'ob-cljs)
#+END_SRC

* Usage

	Create a =SRC= block and evaluate it with =C-c C-c=.

#+BEGIN_SRC cljs :results value code
(map (fn [x] (* x x)) [1 2 3])
#+END_SRC

#+RESULTS:
#+BEGIN_SRC cljs
(1 4 9)
#+END_SRC

* Project Files

** gitignore

#+BEGIN_SRC shell :tangle .gitignore
/.test-org-id-locations
dist/
#+END_SRC

* Next Steps                                                       :noexport:

** TODO Make path to lumo configurable
** TODO Remove logging
** TODO Add to MELPA
