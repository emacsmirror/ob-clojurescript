#+TITLE: ob-cljs
#+AUTHOR: Larry Staton Jr.
#+EMAIL: larry@larrystaton.com
#+DATE: 2016 July 16
#+LANGUAGE: en
#+OPTIONS: num: nil

* What is this? 																												:toc:
   - [[#isnt-planck-only-available-on-mac-os-x][Isn't =planck= only available on Mac OS X?]]
 - [[#how-do-i-install-this][How do I install this?]]
 - [[#how-do-i-use-this][How do I use this?]]
 - [[#what-happens-if-it-breaks][What happens if it breaks?]]

** Isn't =planck= only available on Mac OS X?

	 Yes, although Planck 2.0 [[http://planck-repl.org/download-alpha.html][will be available on Ubuntu]]. At some
	 point, I'd like to have the option of using [[https://github.com/nasser/clojurescript-npm][node]].

* How do I install this?

	I'll figure out how to get this on MELPA, but for now, you can
	either tangle this README then install the resulting =ob-cljs.el=
	file or you can evaluate the code in this README file.

#+BEGIN_SRC emacs-lisp :tangle ob-cljs.el
;;; ob-cljs.el --- org-babel functions for ClojureScript evaluation

;; Author: Larry Staton Jr.
;;
;; Keywords: literate programming, reproducible research
;; Homepage: http:///orgmode.org

;;; Commentary:

;; Support for evaluating ClojureScript code

;; Requirements:

;; - [[http://planck-repl.org/][planck]]

;;; Code:
(require 'ob)
(eval-when-compile
  (require 'cl))

(defvar org-babel-tangle-lang-exts)
(add-to-list 'org-babel-tangle-exts '("cljs" . "cljs"))

(defvar org-babel-default-header-args:cljs '())
(defvar org-babel-header-args:cljs '((package . :any)))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ob-cljs.el :results silent
(defun escape-quotes (str-val)
	(replace-regexp-in-string "\"" "\\\"" str-val 'FIXEDCASE 'LITERAL))

(defun org-babel-expand-body:cljs (body params)
	"Expand BODY according to PARAMS, return the expanded body."
	(message "raw body: %s" body)
  (let* ((vars (mapcar #'cdr (org-babel-get-header params :var)))
				 (result-params (cdr (assoc :result-params params)))
				 (print-level nil)
				 (print-length nil)
				 (body (escape-quotes
								(org-babel-trim
								 (if (> (length vars) 0)
										 (concat "(let ["
														 (mapconcat
															(lambda (var)
																(format "%S (quote %S)" (car var) (cdr var)))
															vars "\n      ")
														 "]\n" body ")")
									 body)))))
		(message "escaped body: %s" body)
    (if (or (member "code" result-params)
						(member "pp" result-params))
				(format "(print (do %s))" body)
      body)))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ob-cljs.el :results silent
(defun org-babel-execute:cljs (body params)
  "Execute a block of Clojure code with Babel."
  (let ((expanded (org-babel-expand-body:cljs body params))
				result)
		(message "expanded: %s" expanded)
		(setq result
					(org-babel-trim
					 (shell-command-to-string
						(concat "/usr/local/bin/planck -e \"" expanded "\""))))
    (org-babel-result-cond (cdr (assoc :result-params params))
			result
      (condition-case nil (org-babel-script-escape result)
	(error result)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ob-cljs.el
(provide 'ob-cljs)

;;; ob-cljs.el ends here
#+END_SRC

* How do I use this?

	Create a =SRC= block and evaluate it with =C-c C-c=.

#+BEGIN_SRC cljs :results value code
(map (fn [x] (* x x)) [1 2 3])
#+END_SRC

#+RESULTS:
#+BEGIN_SRC cljs
(1 4 9)
#+END_SRC

* What happens if it breaks?

	Pull requests welcome.
